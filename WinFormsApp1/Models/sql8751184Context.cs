// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WinFormsApp1.Models;

public partial class sql8751184Context : DbContext
{
    public sql8751184Context(DbContextOptions<sql8751184Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Day> Days { get; set; }

    public virtual DbSet<Group> Groups { get; set; }

    public virtual DbSet<Lesson> Lessons { get; set; }

    public virtual DbSet<LessonType> LessonTypes { get; set; }

    public virtual DbSet<LesssonOrder> LesssonOrders { get; set; }

    public virtual DbSet<Office> Offices { get; set; }

    public virtual DbSet<Semester> Semesters { get; set; }

    public virtual DbSet<Subject> Subjects { get; set; }

    public virtual DbSet<Teacher> Teachers { get; set; }

    public virtual DbSet<TypeOffice> TypeOffices { get; set; }

    public virtual DbSet<Week> Weeks { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("latin1_swedish_ci")
            .HasCharSet("latin1");

        modelBuilder.Entity<Day>(entity =>
        {
            entity.HasKey(e => e.DayID).HasName("PRIMARY");

            entity.ToTable("Day");

            entity.HasIndex(e => e.WeekID, "Day_ibfk_1");

            entity.Property(e => e.DayID).HasColumnType("int(11)");
            entity.Property(e => e.DayName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.WeekID).HasColumnType("int(11)");

            entity.HasOne(d => d.Week).WithMany(p => p.Days)
                .HasForeignKey(d => d.WeekID)
                .HasConstraintName("Day_ibfk_1");
        });

        modelBuilder.Entity<Group>(entity =>
        {
            entity.HasKey(e => e.GroupID).HasName("PRIMARY");

            entity.Property(e => e.GroupID).HasColumnType("int(11)");
            entity.Property(e => e.GroupName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Lesson>(entity =>
        {
            entity.HasKey(e => new { e.LessonID, e.OfficeID, e.DayID, e.SubjectID, e.GroupID, e.TeacherID, e.LesssonOrderID, e.LessonTypesID })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0, 0, 0, 0 });

            entity.HasIndex(e => e.DayID, "DayID");

            entity.HasIndex(e => e.GroupID, "GroupID");

            entity.HasIndex(e => e.OfficeID, "OfficeID");

            entity.HasIndex(e => e.SubjectID, "SubjectID");

            entity.HasIndex(e => e.LessonTypesID, "fk_Lessons_LessonTypes2_idx");

            entity.HasIndex(e => e.LesssonOrderID, "fk_Lessons_LesssonOrder1_idx");

            entity.HasIndex(e => e.TeacherID, "fk_Lessons_Teachers1_idx");

            entity.Property(e => e.LessonID)
                .ValueGeneratedOnAdd()
                .HasColumnType("int(11)");
            entity.Property(e => e.OfficeID).HasColumnType("int(11)");
            entity.Property(e => e.DayID).HasColumnType("int(11)");
            entity.Property(e => e.SubjectID).HasColumnType("int(11)");
            entity.Property(e => e.GroupID).HasColumnType("int(11)");
            entity.Property(e => e.TeacherID).HasColumnType("int(11)");
            entity.Property(e => e.LesssonOrderID).HasColumnType("int(11)");
            entity.Property(e => e.LessonTypesID).HasColumnType("int(11)");

            entity.HasOne(d => d.Day).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.DayID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Lessons_ibfk_4");

            entity.HasOne(d => d.Group).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.GroupID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Lessons_ibfk_1");

            entity.HasOne(d => d.LessonTypes).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.LessonTypesID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Lessons_LessonTypes2");

            entity.HasOne(d => d.LesssonOrder).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.LesssonOrderID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Lessons_LesssonOrder1");

            entity.HasOne(d => d.Office).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.OfficeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Lessons_ibfk_2");

            entity.HasOne(d => d.Subject).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.SubjectID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Lessons_ibfk_3");

            entity.HasOne(d => d.Teacher).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.TeacherID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Lessons_Teachers1");
        });

        modelBuilder.Entity<LessonType>(entity =>
        {
            entity.HasKey(e => e.LessonTypesID).HasName("PRIMARY");

            entity.Property(e => e.LessonTypesID)
                .ValueGeneratedNever()
                .HasColumnType("int(11)");
            entity.Property(e => e.LessonTypes)
                .IsRequired()
                .HasMaxLength(45);
        });

        modelBuilder.Entity<LesssonOrder>(entity =>
        {
            entity.HasKey(e => e.LesssonOrderID).HasName("PRIMARY");

            entity.ToTable("LesssonOrder");

            entity.Property(e => e.LesssonOrderID)
                .ValueGeneratedNever()
                .HasColumnType("int(11)");
            entity.Property(e => e.LesssonOrder1)
                .HasColumnType("int(11)")
                .HasColumnName("LesssonOrder");
        });

        modelBuilder.Entity<Office>(entity =>
        {
            entity.HasKey(e => e.OfficeID).HasName("PRIMARY");

            entity.Property(e => e.OfficeID).HasColumnType("int(11)");
            entity.Property(e => e.NumberSeats).HasColumnType("int(11)");

            entity.HasMany(d => d.OfficeTypes).WithMany(p => p.Offices)
                .UsingEntity<Dictionary<string, object>>(
                    "TypeAssign",
                    r => r.HasOne<TypeOffice>().WithMany()
                        .HasForeignKey("OfficeTypeID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("TypeAssign_ibfk_2"),
                    l => l.HasOne<Office>().WithMany()
                        .HasForeignKey("OfficeID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("TypeAssign_ibfk_1"),
                    j =>
                    {
                        j.HasKey("OfficeID", "OfficeTypeID")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("TypeAssign");
                        j.HasIndex(new[] { "OfficeID" }, "OfficeID");
                        j.HasIndex(new[] { "OfficeTypeID" }, "OfficeTypeID");
                        j.IndexerProperty<int>("OfficeID").HasColumnType("int(11)");
                        j.IndexerProperty<int>("OfficeTypeID").HasColumnType("int(11)");
                    });
        });

        modelBuilder.Entity<Semester>(entity =>
        {
            entity.HasKey(e => e.SemesterID).HasName("PRIMARY");

            entity.HasIndex(e => e.SemesterID, "SemesterID_UNIQUE").IsUnique();

            entity.Property(e => e.SemesterID).HasColumnType("int(11)");
            entity.Property(e => e.SemesterNumber).HasColumnType("int(11)");
        });

        modelBuilder.Entity<Subject>(entity =>
        {
            entity.HasKey(e => e.SubjectID).HasName("PRIMARY");

            entity.Property(e => e.SubjectID).HasColumnType("int(11)");
            entity.Property(e => e.HoursPerConsult).HasColumnType("int(11)");
            entity.Property(e => e.HoursPerExam).HasColumnType("int(11)");
            entity.Property(e => e.HoursPerLaborat).HasColumnType("int(11)");
            entity.Property(e => e.HoursPerLecture).HasColumnType("int(11)");
            entity.Property(e => e.HoursPerPractic).HasColumnType("int(11)");
            entity.Property(e => e.SubjectName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Subjectscol)
                .IsRequired()
                .HasMaxLength(45);
        });

        modelBuilder.Entity<Teacher>(entity =>
        {
            entity.HasKey(e => e.TeacherID).HasName("PRIMARY");

            entity.Property(e => e.TeacherID).HasColumnType("int(11)");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MiddleName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TypeOffice>(entity =>
        {
            entity.HasKey(e => e.OfficeTypeID).HasName("PRIMARY");

            entity.Property(e => e.OfficeTypeID).HasColumnType("int(11)");
            entity.Property(e => e.OfficeType)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Week>(entity =>
        {
            entity.HasKey(e => e.WeekID).HasName("PRIMARY");

            entity.HasIndex(e => e.SemesterID, "Weeks_ibfk_1_idx");

            entity.Property(e => e.WeekID).HasColumnType("int(11)");
            entity.Property(e => e.SemesterID).HasColumnType("int(11)");
            entity.Property(e => e.WeekNumber).HasColumnType("int(11)");

            entity.HasOne(d => d.Semester).WithMany(p => p.Weeks)
                .HasForeignKey(d => d.SemesterID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Weeks_ibfk_1");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}